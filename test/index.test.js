const compressNumberArray = require("compress-number-array")

describe("JavaScript", () => {
  describe("50 random numbers up to 300", () => {
    const original = [
      22, 43, 155, 88, 210, 211, 275, 246, 242, 168, 166, 85, 180, 22, 9, 100, 137, 122, 249, 162, 70, 2, 55, 20, 216,
      103, 152, 41, 191, 279, 126, 121, 73, 24, 87, 26, 227, 223, 15, 296, 160, 297, 263, 88, 105, 107, 145, 129, 147,
      87,
    ]

    const compressed100 =
      "2, 9, 15, 20, 22, 24, 26, 41, 43, 55, 70, 73, 85, 87-88, 100, 103, 105, 107, 121-122, 126, 129, 137, 145, 147, 152, 155, 160, 162, 166, 168, 180, 191, 210-211, 216, 223, 227, 242, 246, 249, 263, 275, 279, 296-297"
    const compressed20 =
      "2, 9, 15-26, 41-43, 55, 70-73, 85-88, 100-107, 121-129, 137, 145-168, 180, 191, 210-216, 223-227, 242-249, 263, 275-279, 296-297"
    const compressed0 = "2-297"

    const decompressed100 = [...new Set(original)].sort((a, b) => a - b)
    const decompressed20 = [92, 235, 433, 558, 836, 811, 1008, 1187]
    const decompressed0 = []

    it("to string", () => {
      expect(compressNumberArray(original, 100)).toEqual(compressed100)
      expect(compressNumberArray(original, 20)).toEqual(compressed20)
      expect(compressNumberArray(original, 0)).toEqual(compressed0)
    })

    it("to array", () => {
      expect(compressNumberArray(compressed100, 100)).toEqual(decompressed100)
      expect(compressNumberArray(compressed100, 20)).toEqual(decompressed20)
      expect(compressNumberArray(compressed100, 0)).toEqual(decompressed0)
    })
  })

  describe("100 random numbers up to 300", () => {
    const original = [
      295, 60, 207, 298, 183, 22, 192, 100, 136, 299, 211, 223, 67, 37, 14, 79, 173, 119, 21, 10, 221, 243, 250, 17,
      254, 220, 233, 215, 275, 294, 234, 197, 66, 67, 1, 55, 266, 55, 28, 224, 280, 240, 31, 167, 99, 250, 6, 120, 268,
      128, 22, 43, 155, 88, 210, 211, 275, 246, 242, 168, 166, 85, 180, 22, 9, 100, 137, 122, 249, 162, 70, 2, 55, 20,
      216, 103, 152, 41, 191, 279, 126, 121, 73, 24, 87, 26, 227, 223, 15, 296, 160, 297, 263, 88, 105, 107, 145, 129,
      147, 87,
    ]

    const compressed100 =
      "1-2, 6, 9-10, 14-15, 17, 20-22, 24, 26, 28, 31, 37, 41, 43, 55, 60, 66-67, 70, 73, 79, 85, 87-88, 99-100, 103, 105, 107, 119-122, 126, 128-129, 136-137, 145, 147, 152, 155, 160, 162, 166-168, 173, 180, 183, 191-192, 197, 207, 210-211, 215-216, 220-221, 223-224, 227, 233-234, 240, 242-243, 246, 249-250, 254, 263, 266, 268, 275, 279-280, 294-299"
    const compressed20 =
      "1-31, 37-43, 55-60, 66-73, 79, 85-88, 99-107, 119-129, 136-137, 145-173, 180-183, 191-197, 207-227, 233-234, 240-254, 263-268, 275-280, 294-299"
    const compressed0 = "1-299"

    const decompressed100 = [...new Set(original)].sort((a, b) => a - b)
    const decompressed20 = [42, 95, 146, 265, 374, 582, 589, 656, 759, 836, 943, 1279, 1128, 1205, 1282, 1396]
    const decompressed0 = []

    it("to string", () => {
      expect(compressNumberArray(original, 100)).toEqual(compressed100)
      expect(compressNumberArray(original, 20)).toEqual(compressed20)
      expect(compressNumberArray(original, 0)).toEqual(compressed0)
    })

    it("to array", () => {
      expect(compressNumberArray(compressed100, 100)).toEqual(decompressed100)
      expect(compressNumberArray(compressed100, 20)).toEqual(decompressed20)
      expect(compressNumberArray(compressed100, 0)).toEqual(decompressed0)
    })
  })

  describe("500 random numbers up to 300", () => {
    const original = [
      163, 81, 298, 171, 23, 69, 93, 111, 89, 16, 138, 220, 1, 47, 218, 59, 97, 39, 223, 54, 89, 282, 99, 286, 55, 47,
      83, 13, 83, 276, 82, 135, 127, 214, 114, 297, 161, 161, 134, 1, 214, 238, 281, 105, 197, 187, 108, 160, 17, 82,
      133, 225, 299, 25, 62, 217, 78, 53, 299, 6, 182, 66, 221, 14, 206, 291, 141, 68, 86, 185, 13, 49, 271, 216, 69,
      188, 113, 28, 160, 276, 295, 81, 272, 142, 72, 187, 271, 72, 119, 118, 84, 67, 252, 112, 249, 297, 285, 227, 193,
      128, 44, 226, 156, 85, 156, 152, 263, 281, 235, 264, 243, 125, 260, 171, 202, 218, 88, 127, 192, 265, 266, 190,
      32, 128, 253, 64, 264, 69, 114, 205, 225, 86, 170, 34, 191, 248, 174, 281, 31, 289, 234, 80, 116, 210, 10, 217,
      115, 42, 229, 64, 94, 81, 98, 129, 119, 227, 146, 139, 250, 195, 28, 86, 218, 31, 145, 267, 88, 279, 264, 145, 83,
      95, 45, 79, 194, 196, 169, 226, 146, 86, 227, 218, 119, 160, 25, 290, 57, 201, 53, 252, 276, 2, 210, 107, 113,
      239, 78, 110, 257, 286, 282, 118, 39, 84, 46, 143, 6, 202, 139, 287, 50, 4, 46, 210, 228, 147, 19, 77, 255, 34,
      217, 135, 65, 198, 229, 136, 29, 217, 261, 13, 230, 94, 260, 36, 176, 59, 284, 211, 282, 78, 47, 232, 123, 52,
      160, 21, 94, 134, 36, 96, 220, 211, 293, 236, 75, 80, 96, 144, 5, 265, 80, 143, 203, 278, 123, 126, 99, 180, 54,
      133, 95, 299, 207, 31, 99, 196, 261, 92, 212, 85, 237, 123, 156, 186, 13, 84, 206, 32, 139, 57, 70, 242, 263, 247,
      149, 119, 72, 295, 250, 200, 218, 207, 129, 83, 87, 157, 37, 4, 291, 263, 145, 133, 229, 137, 249, 193, 39, 112,
      33, 242, 24, 26, 193, 104, 198, 92, 86, 191, 151, 76, 91, 241, 219, 173, 80, 7, 31, 158, 68, 13, 116, 290, 155,
      41, 18, 269, 235, 116, 91, 216, 144, 251, 200, 137, 201, 53, 229, 177, 97, 241, 17, 298, 249, 164, 68, 53, 117,
      103, 256, 221, 104, 273, 201, 280, 136, 66, 82, 178, 33, 213, 183, 119, 81, 252, 100, 259, 167, 18, 178, 212, 271,
      171, 74, 265, 23, 65, 110, 35, 209, 47, 45, 98, 170, 249, 6, 294, 127, 172, 106, 84, 271, 146, 3, 18, 80, 4, 207,
      272, 100, 172, 192, 292, 270, 107, 168, 40, 34, 183, 154, 181, 223, 214, 101, 132, 30, 80, 203, 295, 105, 246,
      256, 148, 198, 60, 36, 273, 8, 270, 112, 131,
    ]

    const compressed100 =
      "1-8, 10, 13-14, 16-19, 21, 23-26, 28-37, 39-42, 44-47, 49-50, 52-55, 57, 59-60, 62, 64-70, 72, 74-89, 91-101, 103-108, 110-119, 123, 125-129, 131-139, 141-149, 151-152, 154-158, 160-161, 163-164, 167-174, 176-178, 180-183, 185-188, 190-198, 200-203, 205-207, 209-214, 216-221, 223, 225-230, 232, 234-239, 241-243, 246-253, 255-257, 259-261, 263-267, 269-273, 276, 278-282, 284-287, 289-295, 297-299"
    const compressed20 = "1-299"

    const decompressed100 = [...new Set(original)].sort((a, b) => a - b)
    const decompressed20 = [
      21, 52, 91, 126, 155, 181, 212, 244, 278, 317, 346, 380, 405, 430, 459, 485, 513, 542, 570, 602, 641, 670, 697,
      873, 761, 792, 831, 860, 892, 923, 954, 980, 1011, 1043, 1072, 1101, 1135, 1167, 1197, 1233, 1261, 1293, 1325,
      1355, 1394, 1424, 1455,
    ]
    const decompressed0 = []

    it("to string", () => {
      expect(compressNumberArray(original, 100)).toEqual(compressed100)
      expect(compressNumberArray(original, 20)).toEqual(compressed20)
    })

    it("to array", () => {
      expect(compressNumberArray(compressed100, 100)).toEqual(decompressed100)
      expect(compressNumberArray(compressed100, 20)).toEqual(decompressed20)
      expect(compressNumberArray(compressed100, 0)).toEqual(decompressed0)
    })
  })

  describe("1000 random numbers up to 300", () => {
    const original = [
      163, 81, 298, 171, 23, 69, 93, 111, 89, 16, 138, 220, 1, 47, 218, 59, 97, 39, 223, 54, 89, 282, 99, 286, 55, 47,
      83, 13, 83, 276, 82, 135, 127, 214, 114, 297, 161, 161, 134, 1, 214, 238, 281, 105, 197, 187, 108, 160, 17, 82,
      133, 225, 299, 25, 62, 217, 78, 53, 299, 6, 182, 66, 221, 14, 206, 291, 141, 68, 86, 185, 13, 49, 271, 216, 69,
      188, 113, 28, 160, 276, 295, 81, 272, 142, 72, 187, 271, 72, 119, 118, 84, 67, 252, 112, 249, 297, 285, 227, 193,
      128, 44, 226, 156, 85, 156, 152, 263, 281, 235, 264, 243, 125, 260, 171, 202, 218, 88, 127, 192, 265, 266, 190,
      32, 128, 253, 64, 264, 69, 114, 205, 225, 86, 170, 34, 191, 248, 174, 281, 31, 289, 234, 80, 116, 210, 10, 217,
      115, 42, 229, 64, 94, 81, 98, 129, 119, 227, 146, 139, 250, 195, 28, 86, 218, 31, 145, 267, 88, 279, 264, 145, 83,
      95, 45, 79, 194, 196, 169, 226, 146, 86, 227, 218, 119, 160, 25, 290, 57, 201, 53, 252, 276, 2, 210, 107, 113,
      239, 78, 110, 257, 286, 282, 118, 39, 84, 46, 143, 6, 202, 139, 287, 50, 4, 46, 210, 228, 147, 19, 77, 255, 34,
      217, 135, 65, 198, 229, 136, 29, 217, 261, 13, 230, 94, 260, 36, 176, 59, 284, 211, 282, 78, 47, 232, 123, 52,
      160, 21, 94, 134, 36, 96, 220, 211, 293, 236, 75, 80, 96, 144, 5, 265, 80, 143, 203, 278, 123, 126, 99, 180, 54,
      133, 95, 299, 207, 31, 99, 196, 261, 92, 212, 85, 237, 123, 156, 186, 13, 84, 206, 32, 139, 57, 70, 242, 263, 247,
      149, 119, 72, 295, 250, 200, 218, 207, 129, 83, 87, 157, 37, 4, 291, 263, 145, 133, 229, 137, 249, 193, 39, 112,
      33, 242, 24, 26, 193, 104, 198, 92, 86, 191, 151, 76, 91, 241, 219, 173, 80, 7, 31, 158, 68, 13, 116, 290, 155,
      41, 18, 269, 235, 116, 91, 216, 144, 251, 200, 137, 201, 53, 229, 177, 97, 241, 17, 298, 249, 164, 68, 53, 117,
      103, 256, 221, 104, 273, 201, 280, 136, 66, 82, 178, 33, 213, 183, 119, 81, 252, 100, 259, 167, 18, 178, 212, 271,
      171, 74, 265, 23, 65, 110, 35, 209, 47, 45, 98, 170, 249, 6, 294, 127, 172, 106, 84, 271, 146, 3, 18, 80, 4, 207,
      272, 100, 172, 192, 292, 270, 107, 168, 40, 34, 183, 154, 181, 223, 214, 101, 132, 30, 80, 203, 295, 105, 246,
      256, 148, 198, 60, 36, 273, 8, 270, 112, 131, 163, 81, 298, 171, 23, 69, 93, 111, 89, 16, 138, 220, 1, 47, 218,
      59, 97, 39, 223, 54, 89, 282, 99, 286, 55, 47, 83, 13, 83, 276, 82, 135, 127, 214, 114, 297, 161, 161, 134, 1,
      214, 238, 281, 105, 197, 187, 108, 160, 17, 82, 133, 225, 299, 25, 62, 217, 78, 53, 299, 6, 182, 66, 221, 14, 206,
      291, 141, 68, 86, 185, 13, 49, 271, 216, 69, 188, 113, 28, 160, 276, 295, 81, 272, 142, 72, 187, 271, 72, 119,
      118, 84, 67, 252, 112, 249, 297, 285, 227, 193, 128, 44, 226, 156, 85, 156, 152, 263, 281, 235, 264, 243, 125,
      260, 171, 202, 218, 88, 127, 192, 265, 266, 190, 32, 128, 253, 64, 264, 69, 114, 205, 225, 86, 170, 34, 191, 248,
      174, 281, 31, 289, 234, 80, 116, 210, 10, 217, 115, 42, 229, 64, 94, 81, 98, 129, 119, 227, 146, 139, 250, 195,
      28, 86, 218, 31, 145, 267, 88, 279, 264, 145, 83, 95, 45, 79, 194, 196, 169, 226, 146, 86, 227, 218, 119, 160, 25,
      290, 57, 201, 53, 252, 276, 2, 210, 107, 113, 239, 78, 110, 257, 286, 282, 118, 39, 84, 46, 143, 6, 202, 139, 287,
      50, 4, 46, 210, 228, 147, 19, 77, 255, 34, 217, 135, 65, 198, 229, 136, 29, 217, 261, 13, 230, 94, 260, 36, 176,
      59, 284, 211, 282, 78, 47, 232, 123, 52, 160, 21, 94, 134, 36, 96, 220, 211, 293, 236, 75, 80, 96, 144, 5, 265,
      80, 143, 203, 278, 123, 126, 99, 180, 54, 133, 95, 299, 207, 31, 99, 196, 261, 92, 212, 85, 237, 123, 156, 186,
      13, 84, 206, 32, 139, 57, 70, 242, 263, 247, 149, 119, 72, 295, 250, 200, 218, 207, 129, 83, 87, 157, 37, 4, 291,
      263, 145, 133, 229, 137, 249, 193, 39, 112, 33, 242, 24, 26, 193, 104, 198, 92, 86, 191, 151, 76, 91, 241, 219,
      173, 80, 7, 31, 158, 68, 13, 116, 290, 155, 41, 18, 269, 235, 116, 91, 216, 144, 251, 200, 137, 201, 53, 229, 177,
      97, 241, 17, 298, 249, 164, 68, 53, 117, 103, 256, 221, 104, 273, 201, 280, 136, 66, 82, 178, 33, 213, 183, 119,
      81, 252, 100, 259, 167, 18, 178, 212, 271, 171, 74, 265, 23, 65, 110, 35, 209, 47, 45, 98, 170, 249, 6, 294, 127,
      172, 106, 84, 271, 146, 3, 18, 80, 4, 207, 272, 100, 172, 192, 292, 270, 107, 168, 40, 34, 183, 154, 181, 223,
      214, 101, 132, 30, 80, 203, 295, 105, 246, 256, 148, 198, 60, 36, 273, 8, 270, 112, 131,
    ]

    const compressed100 =
      "1-8, 10, 13-14, 16-19, 21, 23-26, 28-37, 39-42, 44-47, 49-50, 52-55, 57, 59-60, 62, 64-70, 72, 74-89, 91-101, 103-108, 110-119, 123, 125-129, 131-139, 141-149, 151-152, 154-158, 160-161, 163-164, 167-174, 176-178, 180-183, 185-188, 190-198, 200-203, 205-207, 209-214, 216-221, 223, 225-230, 232, 234-239, 241-243, 246-253, 255-257, 259-261, 263-267, 269-273, 276, 278-282, 284-287, 289-295, 297-299"
    const compressed20 = "1-299"

    const decompressed100 = [...new Set(original)].sort((a, b) => a - b)
    const decompressed20 = [
      21, 52, 91, 126, 155, 181, 212, 244, 278, 317, 346, 380, 405, 430, 459, 485, 513, 542, 570, 602, 641, 670, 697,
      873, 761, 792, 831, 860, 892, 923, 954, 980, 1011, 1043, 1072, 1101, 1135, 1167, 1197, 1233, 1261, 1293, 1325,
      1355, 1394, 1424, 1455,
    ]
    const decompressed0 = []

    it("to string", () => {
      expect(compressNumberArray(original, 100)).toEqual(compressed100)
      expect(compressNumberArray(original, 20)).toEqual(compressed20)
    })

    it("to array", () => {
      expect(compressNumberArray(compressed100, 100)).toEqual(decompressed100)
      expect(compressNumberArray(compressed100, 20)).toEqual(decompressed20)
      expect(compressNumberArray(compressed100, 0)).toEqual(decompressed0)
    })
  })
})
